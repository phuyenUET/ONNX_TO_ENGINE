import customtkinter as ctk
from settings import *
import serial
import serial.tools.list_ports
from tkinter import messagebox

class StatsTabView(ctk.CTkTabview):
    """TabView ch·ª©a Stats v√† UART Settings"""
    def __init__(self, parent):
        super().__init__(master=parent)
        
        # T·∫°o 2 tabs
        self.add("STATS")
        self.add("SETTINGS")
        
        # Stats Frame trong tab 1
        self.stats_frame = StatsFrame(self.tab("STATS"))

        # UART Settings trong tab 2
        self.uart_frame = UARTFrame(self.tab("SETTINGS"))

    def update_stats(self, stats):
        """Wrapper ƒë·ªÉ update stats"""
        self.stats_frame.update_stats(stats)
    
    def send_uart(self, error_code: str):
        """G·ª≠i error code qua UART (ƒë∆∞·ª£c g·ªçi t·ª´ VidFrame)"""
        self.uart_frame.send_error_code(error_code)  


class StatsFrame(ctk.CTkFrame):
    """Frame hi·ªÉn th·ªã th·ªëng k√™"""
    def __init__(self, parent):
        super().__init__(parent, fg_color=DARK_GREY, corner_radius=10)
        self.pack(fill='both', expand=True, padx=10, pady=10)
        
        # Title
        title = ctk.CTkLabel(
            self,
            text="üìä TH·ªêNG K√ä",
            font=TITLE_FONT,
            text_color=WHITE
        )
        title.pack(pady=(20, 10))
        
        # Separator
        separator = ctk.CTkFrame(self, height=2, fg_color=BLUE)
        separator.pack(fill='x', padx=20, pady=10)
        
        # Stats container v·ªõi grid layout
        stats_container = ctk.CTkFrame(self, fg_color=DARK_GREY)
        stats_container.pack(fill='x', padx=20, pady=10)
        
        # Configure grid columns
        stats_container.columnconfigure(0, weight=1)  # Label column
        stats_container.columnconfigure(1, weight=0)  # Number column (fixed width)
        
        # Row 0: T·ªïng s·ªë
        total_icon = ctk.CTkLabel(
            stats_container,
            text="üì¶  T·ªîNG S·ªê CHAI:",
            font=MAIN_FONT,
            text_color=WHITE,
            anchor='w'
        )
        total_icon.grid(row=0, column=0, sticky='w', pady=5)
        
        self.total_value = ctk.CTkLabel(
            stats_container,
            text="0",
            font=BOLD_FONT,
            text_color=WHITE,
            width=60,
            anchor='e'
        )
        self.total_value.grid(row=0, column=1, sticky='e', pady=5, padx=(10, 0))
        
        # Row 1: Chai OK
        ok_icon = ctk.CTkLabel(
            stats_container,
            text="‚úÖ CHAI OK (0):",
            font=MAIN_FONT,
            text_color=GREEN,
            anchor='w'
        )
        ok_icon.grid(row=1, column=0, sticky='w', pady=5)
        
        self.ok_value = ctk.CTkLabel(
            stats_container,
            text="0",
            font=BOLD_FONT,
            text_color=GREEN,
            width=60,
            anchor='e'
        )
        self.ok_value.grid(row=1, column=1, sticky='e', pady=5, padx=(10, 0))
        
        # Row 2: L·ªói m·ª±c n∆∞·ªõc
        water_icon = ctk.CTkLabel(
            stats_container,
            text="üíß  L·ªñI M·ª∞C N∆Ø·ªöC (1):",
            font=MAIN_FONT,
            text_color=YELLOW,
            anchor='w'
        )
        water_icon.grid(row=2, column=0, sticky='w', pady=5)
        
        self.water_value = ctk.CTkLabel(
            stats_container,
            text="0",
            font=BOLD_FONT,
            text_color=YELLOW,
            width=60,
            anchor='e'
        )
        self.water_value.grid(row=2, column=1, sticky='e', pady=5, padx=(10, 0))
        
        # Row 3: L·ªói nh√£n
        label_icon = ctk.CTkLabel(
            stats_container,
            text="üîñ  L·ªñI NH√ÉN (2):",
            font=MAIN_FONT,
            text_color=RED,
            anchor='w'
        )
        label_icon.grid(row=3, column=0, sticky='w', pady=5)
        
        self.label_value = ctk.CTkLabel(
            stats_container,
            text="0",
            font=BOLD_FONT,
            text_color=RED,
            width=60,
            anchor='e'
        )
        self.label_value.grid(row=3, column=1, sticky='e', pady=5, padx=(10, 0))
        
        # Separator
        separator2 = ctk.CTkFrame(self, height=2, fg_color=BLUE)
        separator2.pack(fill='x', padx=20, pady=20)
        
        # Current bottles title
        current_title = ctk.CTkLabel(
            self,
            text="üîç CHAI ƒêANG KI·ªÇM TRA",
            font=BOLD_FONT,
            text_color=WHITE
        )
        current_title.pack(pady=(0, 10))
        
        # Scrollable frame for current bottles
        self.bottles_frame = ctk.CTkScrollableFrame(
            self,
            fg_color=BACKGROUND_COLOR,
            height=250
        )
        self.bottles_frame.pack(fill='both', expand=True, padx=10, pady=(0, 20))
        
        self._update_scheduled = False  # ƒê·ªÉ throttle updates
    
    def update_stats(self, stats):
        """C·∫≠p nh·∫≠t th·ªëng k√™ - throttled"""
        if self._update_scheduled:
            return
        
        self._update_scheduled = True
        self.after(50, lambda: self._do_update(stats))  # Update m·ªói 50ms
    
    def _do_update(self, stats):
        """Th·ª±c hi·ªán update"""
        self._update_scheduled = False
        
        # Update s·ªë li·ªáu
        self.total_value.configure(text=str(stats['total']))
        self.ok_value.configure(text=str(stats['ok']))
        self.water_value.configure(text=str(stats['water_error']))
        self.label_value.configure(text=str(stats['label_error']))
        
        # Clear v√† update bottles
        for widget in self.bottles_frame.winfo_children():
            widget.destroy()
        
        if not stats['current_bottles']:
            no_bottle_label = ctk.CTkLabel(
                self.bottles_frame,
                text="Kh√¥ng c√≥ chai n√†o",
                font=MAIN_FONT,
                text_color=GREY
            )
            no_bottle_label.pack(pady=10)
        else:
            for bottle_id, water_ok, label_ok, error_type in stats['current_bottles']:
                # T·∫°o frame cho t·ª´ng bottle v·ªõi grid layout
                bottle_frame = ctk.CTkFrame(
                    self.bottles_frame,
                    fg_color=DARK_GREY,
                    corner_radius=5
                )
                bottle_frame.pack(fill='x', pady=5, padx=5)
                
                # Configure grid
                bottle_frame.columnconfigure(0, weight=0)  # ID
                bottle_frame.columnconfigure(1, weight=1)  # N∆∞·ªõc
                bottle_frame.columnconfigure(2, weight=1)  # Nh√£n
                
                # ID
                id_label = ctk.CTkLabel(
                    bottle_frame,
                    text=f"ID: {bottle_id}",
                    font=BOLD_FONT,
                    text_color=BLUE,
                    width=70,
                    anchor='w'
                )
                id_label.grid(row=0, column=0, padx=10, pady=8, sticky='w')
                
                # Water status
                water_icon = "‚úÖ" if water_ok else "‚ùå"
                water_label = ctk.CTkLabel(
                    bottle_frame,
                    text=f"{water_icon} N∆∞·ªõc",
                    font=MAIN_FONT,
                    text_color=GREEN if water_ok else RED,
                    anchor='center'
                )
                water_label.grid(row=0, column=1, padx=5, pady=8)
                
                # Label status
                label_icon = "‚úÖ" if label_ok else "‚ùå"
                label_label = ctk.CTkLabel(
                    bottle_frame,
                    text=f"{label_icon} Nh√£n",
                    font=MAIN_FONT,
                    text_color=GREEN if label_ok else RED,
                    anchor='center'
                )
                label_label.grid(row=0, column=2, padx=5, pady=8)


class UARTFrame(ctk.CTkFrame):
    """Frame c√†i ƒë·∫∑t UART"""
    def __init__(self, parent):
        super().__init__(parent, fg_color=DARK_GREY, corner_radius=10)
        self.pack(fill='both', expand=True, padx=10, pady=10)
        
        self.ser = None
        
        # Title
        title = ctk.CTkLabel(
            self,
            text="‚öôÔ∏è C√ÄI ƒê·∫∂T UART",
            font=TITLE_FONT,
            text_color=WHITE
        )
        title.pack(pady=(20, 10))
        
        # Separator
        separator = ctk.CTkFrame(self, height=2, fg_color=BLUE)
        separator.pack(fill='x', padx=20, pady=10)
        
        # Settings container
        settings_frame = ctk.CTkFrame(self, fg_color=DARK_GREY)
        settings_frame.pack(fill='x', padx=20, pady=10)
        
        # COM Port
        port_label = ctk.CTkLabel(
            settings_frame,
            text="Ch·ªçn COM Port:",
            font=MAIN_FONT,
            text_color=WHITE
        )
        port_label.pack(pady=(10, 5))
        
        self.combo_port = ctk.CTkComboBox(
            settings_frame,
            values=self.scan_ports(),
            width=200,
            font=MAIN_FONT
        )
        self.combo_port.pack(pady=(0, 15))
        
        # Baudrate
        baud_label = ctk.CTkLabel(
            settings_frame,
            text="Ch·ªçn Baudrate:",
            font=MAIN_FONT,
            text_color=WHITE
        )
        baud_label.pack(pady=(10, 5))
        
        self.combo_baud = ctk.CTkComboBox(
            settings_frame,
            values=["9600", "115200", "57600"],
            width=200,
            font=MAIN_FONT
        )
        self.combo_baud.set("115200")
        self.combo_baud.pack(pady=(0, 15))
        
        # Buttons frame
        btn_frame = ctk.CTkFrame(settings_frame, fg_color=DARK_GREY)
        btn_frame.pack(pady=10)

        self.btn_connect = ctk.CTkButton(
            btn_frame, text="K·∫øt n·ªëi", command=self.connect_serial,
            font=BOLD_FONT, width=120, fg_color=GREEN, hover_color="#27ae60"
        )
        self.btn_connect.grid(row=0, column=0, padx=5)

        self.btn_disconnect = ctk.CTkButton(
            btn_frame, text="Ng·∫Øt k·∫øt n·ªëi", command=self.disconnect_serial,
            font=BOLD_FONT, width=120, fg_color=RED, hover_color="#c0392b"
        )
        self.btn_disconnect.grid(row=0, column=1, padx=5)
        
        # Status label
        self.lbl_status = ctk.CTkLabel(
            settings_frame,
            text="Ch∆∞a k·∫øt n·ªëi",
            font=BOLD_FONT,
            text_color=RED
        )
        self.lbl_status.pack(pady=10)
        
        # Separator
        separator2 = ctk.CTkFrame(self, height=2, fg_color=BLUE)
        separator2.pack(fill='x', padx=20, pady=20)
    
    def scan_ports(self):
        """Qu√©t c√°c COM port c√≥ s·∫µn"""
        ports = serial.tools.list_ports.comports()
        return [port.device for port in ports] if ports else ["Kh√¥ng c√≥ COM"]
    
    # def refresh_ports(self):
    #     """L√†m m·ªõi danh s√°ch COM ports"""
    #     ports = self.scan_ports()
    #     self.combo_port.configure(values=ports)
    #     if ports and ports[0] != "Kh√¥ng c√≥ COM":
    #         self.combo_port.set(ports[0])
    
    def connect_serial(self):
        """K·∫øt n·ªëi UART"""
        port = self.combo_port.get()
        baud = self.combo_baud.get()
        
        if not port or port == "Kh√¥ng c√≥ COM":
            messagebox.showwarning("Thi·∫øu th√¥ng tin", "Ch·ªçn COM port h·ª£p l·ªá")
            return
        
        if not baud:
            messagebox.showwarning("Thi·∫øu th√¥ng tin", "Ch·ªçn Baudrate")
            return
        
        try:
            self.ser = serial.Serial(port, int(baud), timeout=1)
            self.lbl_status.configure(
                text=f"‚úÖ ƒê√£ k·∫øt n·ªëi {port}",
                text_color=GREEN
            )
            messagebox.showinfo("Th√†nh c√¥ng", f"ƒê√£ k·∫øt n·ªëi {port} @ {baud} baud")
        except Exception as e:
            messagebox.showerror("L·ªói k·∫øt n·ªëi", str(e))
            self.lbl_status.configure(
                text="‚ùå K·∫øt n·ªëi th·∫•t b·∫°i",
                text_color=RED
            )
    
    def disconnect_serial(self):
        """Ng·∫Øt k·∫øt n·ªëi UART"""
        if self.ser and self.ser.is_open:
            self.ser.close()
            self.lbl_status.configure(
                text="‚ö†Ô∏è ƒê√£ ng·∫Øt k·∫øt n·ªëi",
                text_color=YELLOW
            )
            messagebox.showinfo("Th√¥ng b√°o", "ƒê√£ ng·∫Øt k·∫øt n·ªëi UART")
        else:
            messagebox.showinfo("Th√¥ng b√°o", "Ch∆∞a k·∫øt n·ªëi thi·∫øt b·ªã n√†o")
    
    def send_error_code(self, code: str):
        """G·ª≠i m√£ l·ªói qua UART (ch·ªâ d√πng t·ª± ƒë·ªông, kh√¥ng popup)."""
        if self.ser and self.ser.is_open:
            try:
                self.ser.write(code.encode())
                print(f"[UART] sent: {code}")
            except Exception as e:
                print(f"[UART] send failed: {e}")
        else:
            print("[UART] not connected")
    
    def __del__(self):
        """Cleanup khi destroy"""
        if self.ser and self.ser.is_open:
            self.ser.close()